@page "/counter"
@inject IJSRuntime jsRuntime
@inject DialogService dialogService
@inject HttpClient http;
@using Microsoft.AspNetCore.Components.CompilerServices
<RadzenDialog />
<RadzenNotification />

<RadzenPanel AllowCollapse="true" Style="margin-bottom:20px;">
   <HeaderTemplate >
        <div>            
            <RadzenButton Text="ایجاد پرونده جدید" Click="CreateNewMovareth"/>
            <RadzenButton Text="ذخیره پرونده جاری" Click="SaveMovareth"/>
            <RadzenButton Text="بارگذاری پرونده موجود" Click="InputFileClicked" />
            <InputFile OnChange="LoadMovareth" id="getFile" style="display:none"/>
        </div>
    </HeaderTemplate>
    <ChildContent>
        <h3>وراث @(_movareth.Gender == Gender.Male ? "مرحوم" : "مرحومه") @_movareth.FullName</h3>
        <RadzenTree Data="@_tabaghat" Expand="@LoadPeople" style="display: block;">
            <RadzenTreeLevel Text="@GetTextForNode" Template="@_nodeTemplate" />
        </RadzenTree>
    </ChildContent>
</RadzenPanel>


@code {

    //---------- Styles ---------------
    const string StrBtnAdd =
        "padding-left: 20px;" +
        "padding-right: 20px;" +
        "border-radius: 50%;" +
        "background-color: white;" +
        "color: #26b050;" +
        "margin: 0 4px;" +
        "border: 2px solid #26b050;";

    const string StrBtnRemove =
        "padding-left: 20px;" +
        "padding-right: 20px;" +
        "border-radius: 50%;" +
        "background-color: white;" +
        "color: red;" +
        "margin: 0 4px;" +
        "border: 2px solid red;";
    //---------------------------------

    static Counter _thisComponent {get; set;}
    IEnumerable<Tabagheh> _tabaghat;

    private static Person _movareth = new Person
    {
        FullName = "عباس طبیبی",
        Gender = Gender.Male,
    };

    private void CreateNewMovareth()
    {
        _thisComponent.dialogService.Open<DialogNewProject>($"ایجاد پرونده جدید",
            new Dictionary<string, object>() {
                                                { "Movareth", _movareth}
                                             }
            );        
    }

    protected override void OnInitialized()
    {
        InitTree();
        _thisComponent = this;
    }

    private void InitTree()
    {
        _tabaghat = new List<Tabagheh>
    {
            new Tabagheh
            {
                Type = TabaghehType.Tabagheh1,
                Title = "طبقه اول",
                SubNodes = new List<SubNode>
            {
                    new SubNode {Type = SubNodeType.Parents, Title = "والدین"},
                    new SubNode {Type = SubNodeType.Children, Title = "فرزندان"},
                }
            },
            new Tabagheh
            {
                Type = TabaghehType.Tabagheh2,
                Title = "طبقه دوم",
                SubNodes = new List<SubNode>
            {
                    new SubNode {Type = SubNodeType.Grandparents, Title = "اجداد"},
                    new SubNode {Type = SubNodeType.BrothersAndSistersAbavaini, Title = "برادران و خواهران ابوینی"},
                    new SubNode {Type = SubNodeType.BrothersAndSistersAbi, Title = "برادران و خواهران ابی"},
                    new SubNode {Type = SubNodeType.BrothersAndSistersOmmi, Title = "برادران و خواهران امی"},
                }
            },
            new Tabagheh
            {
                Type = TabaghehType.Tabagheh3,
                Title = "طبقه سوم",
                SubNodes = new List<SubNode>
            {
                    new SubNode {Type = SubNodeType.AkhvalAbavaini, Title = "اخوال ابوینی"},
                    new SubNode {Type = SubNodeType.AkhvalAbi, Title = "اخوال ابی"},
                    new SubNode {Type = SubNodeType.AkhvalOmmi, Title = "اخوال امی"},

                    new SubNode {Type = SubNodeType.AmamAbavaini, Title = "اعمام ابوینی"},
                    new SubNode {Type = SubNodeType.AmamAbi, Title = "اعمام ابی"},
                    new SubNode {Type = SubNodeType.AmamOmmi, Title = "اعمام امی"},
                }
            },
            new Tabagheh {Type = TabaghehType.Hamsar, Title = "همسر"}
        };
    }

    void LoadPeople(TreeExpandEventArgs args)
    {
        if (args.Value is Tabagheh tabagheh)
        {
            switch (tabagheh.Type)
            {
                case TabaghehType.Tabagheh1:
                    AddChildrenNodeToTabaghe1(args);
                    break;
                case TabaghehType.Tabagheh2:
                    AddChildrenNodeToTabagheh2(args);
                    break;
                case TabaghehType.Tabagheh3:
                    AddChildrenNodeToTabaghe3(args);
                    break;
                case TabaghehType.Hamsar:
                    AddChildrenNode(args, _movareth.Hamsar, (obj) => false);
                    break;
            }
        }
        else if (args.Value is SubNode node)
        {
            var nodeType = node.Type;
            switch (nodeType)
            {
                case SubNodeType.Parents:
                    AddChildrenNode(args, _movareth.Parents, (p) => false);
                    break;
                case SubNodeType.Children:
                    AddChildrenNode(args, _movareth.Children, (child) => (child as Person)?.Children != null && ((Person)child).Children.Any());
                    break;
                case SubNodeType.Grandparents:
                    AddGrandparents(args);
                    break;
                case SubNodeType.BrothersAndSistersAbavaini:
                    AddBrothersAndSisters(args, AbiOmmi.Abavaini);
                    break;
                case SubNodeType.BrothersAndSistersAbi:
                    AddBrothersAndSisters(args, AbiOmmi.Abi);
                    break;
                case SubNodeType.BrothersAndSistersOmmi:
                    AddBrothersAndSisters(args, AbiOmmi.Ommi);
                    break;
                case SubNodeType.AmamAbavaini:
                    AddAmam(args, AbiOmmi.Abavaini);
                    break;
                case SubNodeType.AmamAbi:
                    AddAmam(args, AbiOmmi.Abi);
                    break;
                case SubNodeType.AmamOmmi:
                    AddAmam(args, AbiOmmi.Ommi);
                    break;
                case SubNodeType.AkhvalAbavaini:
                    AddAkhval(args, AbiOmmi.Abavaini);
                    break;
                case SubNodeType.AkhvalAbi:
                    AddAkhval(args, AbiOmmi.Abi);
                    break;
                case SubNodeType.AkhvalOmmi:
                    AddAkhval(args, AbiOmmi.Ommi);
                    break;
            }
        }
        else if (args.Value is Person person)
        {
            if (person.SubNodeType == SubNodeType.Grandparents)
            {
                AddParentsNode(args, person.Parents,
                    args.Children.HasChildren = (parent) => (parent as Person)?.Parents != null && ((Person)parent).Parents.Any()
                    );
            }
            else
            {
                AddChildrenNode(args, person.Children,
                    args.Children.HasChildren = (child) => (child as Person)?.Children != null && ((Person)child).Children.Any()
                    );
            }
        }

        // Propagate the Template to the children
        args.Children.Template = _nodeTemplate;
    }

    private void AddAkhval(TreeExpandEventArgs args, AbiOmmi abiOmmi)
    {
        AddChildrenNode(args,
            _movareth.Akhval.Where(ak => ak.AbiOmmi == abiOmmi),
            (obj) =>
            {
                var p = (obj as Person);
                string abiOrOmmi = abiOmmi == AbiOmmi.Abavaini ? "ابوینی" : (abiOmmi == AbiOmmi.Abi ? "ابی" : "امی");
                string gender = "خاله";
                if (p?.Gender == Gender.Male)
                    gender = "دایی";
                string title = $"{p?.FullName}({gender} {abiOrOmmi})";
                return title;
            },
            args.Children.HasChildren = (child) => (child as Person)?.Children != null && ((Person)child).Children.Any()
            );
    }

    private void AddAmam(TreeExpandEventArgs args, AbiOmmi abiOmmi)
    {
        AddChildrenNode(args,
            _movareth.Amam.Where(am => am.AbiOmmi == abiOmmi),
            (obj) =>
            {
                var p = (obj as Person);
                string abiOrOmmi = abiOmmi == AbiOmmi.Abavaini ? "ابوینی" : (abiOmmi == AbiOmmi.Abi ? "ابی" : "امی");
                string gender = "عمه";
                if (p?.Gender == Gender.Male)
                    gender = "عمو";
                string title = $"{p?.FullName}({gender} {abiOrOmmi})";
                return title;
            },
            args.Children.HasChildren = (child) => (child as Person)?.Children != null && ((Person)child).Children.Any()
            );


    }

    private void AddBrothersAndSisters(TreeExpandEventArgs args, AbiOmmi abiOmmi)
    {
        AddChildrenNode(args,
            _movareth.BrothersAndSisters.Where(bs => bs.AbiOmmi == abiOmmi),
            (obj) =>
            {
                var p = (obj as Person);
                string abiOrOmmi = abiOmmi == AbiOmmi.Abavaini ? "ابوینی" : (abiOmmi == AbiOmmi.Abi ? "ابی" : "امی");
                string gender = "خواهر";
                if (p?.Gender == Gender.Male)
                    gender = "برادر";
                string title = $"{p?.FullName}({gender} {abiOrOmmi})";
                return title;
            },
            args.Children.HasChildren = (child) => (child as Person)?.Children != null && ((Person)child).Children.Any()
            );
    }

    private void AddGrandparents(TreeExpandEventArgs args)
    {
        AddChildrenNode(args, _movareth.Ajdad,
            (obj) =>
            {
                var p = (obj as Person);
                string abiOrOmmi = "ابی";
                if (p?.AbiOmmi == AbiOmmi.Ommi)
                    abiOrOmmi = "امی";
                string gender = "جده";
                if (p?.Gender == Gender.Male)
                    gender = "جد";
                string title = $"{p?.FullName}({gender} {abiOrOmmi})";
                return title;
            },
            args.Children.HasChildren = (child) => (child as Person)?.Parents != null && ((Person)child).Parents.Any()
            );
    }

    private void AddChildrenNodeToTabaghe1(TreeExpandEventArgs args)
    {
        args.Children.Data = _tabaghat.First(t => t.Type == TabaghehType.Tabagheh1).SubNodes;
        args.Children.Text = (obj) => ((SubNode)obj).Title;
        args.Children.HasChildren = subNode =>
        {
            var node = subNode as SubNode;
            switch (node?.Type)
            {
                case SubNodeType.Parents:
                    return _movareth.Parents?.Count() > 0;
                case SubNodeType.Children:
                    return _movareth.Children?.Count() > 0;
            }

            return false;
        };


    }

    private void AddChildrenNodeToTabagheh2(TreeExpandEventArgs args)
    {
        args.Children.Data = _tabaghat.First(t => t.Type == TabaghehType.Tabagheh2).SubNodes;
        args.Children.Text = (obj) => ((SubNode)obj).Title;
        args.Children.HasChildren = subNode =>
        {
            var node = subNode as SubNode;
            switch (node?.Type)
            {
                case SubNodeType.Grandparents:
                    return _movareth.Ajdad?.Count() > 0;
                case SubNodeType.BrothersAndSistersAbavaini:
                    return _movareth.BrothersAndSisters?.Count(bs => bs.AbiOmmi == AbiOmmi.Abavaini) > 0;
                case SubNodeType.BrothersAndSistersAbi:
                    return _movareth.BrothersAndSisters?.Count(bs => bs.AbiOmmi == AbiOmmi.Abi) > 0;
                case SubNodeType.BrothersAndSistersOmmi:
                    return _movareth.BrothersAndSisters?.Count(bs => bs.AbiOmmi == AbiOmmi.Ommi) > 0;
            }

            return false;
        };
    }

    private void AddChildrenNodeToTabaghe3(TreeExpandEventArgs args)
    {
        args.Children.Data = _tabaghat.First(t => t.Type == TabaghehType.Tabagheh3).SubNodes;
        args.Children.Text = (obj) => ((SubNode)obj).Title;
        args.Children.HasChildren = subNode =>
        {
            var node = subNode as SubNode;
            switch (node?.Type)
            {
                case SubNodeType.AkhvalAbavaini:
                    return _movareth.Akhval?.Count(ak => ak.AbiOmmi == AbiOmmi.Abavaini) > 0;
                case SubNodeType.AkhvalAbi:
                    return _movareth.Akhval?.Count(ak => ak.AbiOmmi == AbiOmmi.Abi) > 0;
                case SubNodeType.AkhvalOmmi:
                    return _movareth.Akhval?.Count(ak => ak.AbiOmmi == AbiOmmi.Ommi) > 0;

                case SubNodeType.AmamAbavaini:
                    return _movareth.Amam?.Count(ak => ak.AbiOmmi == AbiOmmi.Abavaini) > 0;
                case SubNodeType.AmamAbi:
                    return _movareth.Amam?.Count(ak => ak.AbiOmmi == AbiOmmi.Abi) > 0;
                case SubNodeType.AmamOmmi:
                    return _movareth.Amam?.Count(ak => ak.AbiOmmi == AbiOmmi.Ommi) > 0;
            }

            return false;
        };
    }

    void AddChildrenNode(TreeExpandEventArgs args, IEnumerable<Person> data, Func<object, bool> hasChildren)
    {
        AddChildrenNode(args, data, (obj) => ((Person)obj).FullName, hasChildren);
    }

    void AddChildrenNode(TreeExpandEventArgs args, IEnumerable<Person> data, Func<object, string> text, Func<object, bool> hasChildren)
    {
        args.Children.Data = data;
        args.Children.Text = text;
        args.Children.HasChildren = hasChildren;

        // Propagate the Template to the children
        args.Children.Template = _nodeTemplate;
    }

    #region For GrandParents Only
    void AddParentsNode(TreeExpandEventArgs args, IEnumerable<Person> data, Func<object, bool> hasParents)
    {
        AddChildrenNode(args, data, (obj) => ((Person)obj).FullName, hasParents);
    }

    void AddParentsNode(TreeExpandEventArgs args, IEnumerable<Person> data, Func<object, string> text, Func<object, bool> hasParents)
    {
        args.Children.Data = data;
        args.Children.Text = text;
        args.Children.HasChildren = hasParents;

        // Propagate the Template to the children
        args.Children.Template = _nodeTemplate;
    }
    #endregion

    string GetTextForNode(object data)
    {
        return ((Tabagheh)data).Title;
    }

    //void Log (string eventName, string value) {
    //    Console.WriteLine ($"{DateTime.Now}, {eventName}: {value}");
    //}

    //void LogChange (TreeEventArgs args) {
    //    Log ("Change", $"Item Text: {args.Text}");
    //}

    //void LogExpand (TreeExpandEventArgs args) {

    //    // if (args.Value is string text) {
    //    //   Log ("Expand", $"Text: {text}");
    //    // }
    //}



    readonly RenderFragment<RadzenTreeItem> _nodeTemplate = (context) => builder =>
    {

        if (context.Value is Tabagheh)
        {
            builder.OpenComponent<RadzenIcon>(0);
            builder.AddAttribute(1, "Icon",  "folder" );
            builder.CloseComponent();
        }
        else if (context.Value is SubNode subNode)
        {
            string strImageIcon = "images/";
            switch (subNode.Type)
            {
                case SubNodeType.Parents:
                case SubNodeType.Grandparents:
                    strImageIcon += "parents.png";
                    break;
                default:
                    strImageIcon += "people.png";
                    break;
            }

            builder.OpenComponent<RadzenImage>(0);
            builder.AddAttribute(1, "Path", strImageIcon);
            builder.AddAttribute(2, "Style", "width:30px; margin-left:3px;");
            builder.CloseComponent();


        }
        else if (context.Value is Person person)
        {
            string strImageIcon = "images/";
            if (person.IsAlive)
            {
                switch (person.Gender)
                {
                    case Gender.Male:
                        strImageIcon += "man.png";
                        break;
                    case Gender.Female:
                        strImageIcon += "woman.png";
                        break;
                    case Gender.Neutral:
                        strImageIcon += "neutral.png";
                        break;
                }
            }
            else
            {
                switch (person.Gender)
                {
                    case Gender.Male:
                        strImageIcon += "mandead.png";
                        break;
                    case Gender.Female:
                        strImageIcon += "womandead.png";
                        break;
                    case Gender.Neutral:
                        strImageIcon += "neutraldead.png";
                        break;
                }
            }

            builder.OpenComponent<RadzenImage>(0);
            builder.AddAttribute(1,  "Path", strImageIcon);
            builder.AddAttribute(1, "Style", "width:40px;");
            builder.CloseComponent();
        }


        // Append the current item text
        builder.AddContent(3, context.Text);


        if (context.Value is Person personForRemove)
        {
            builder.OpenComponent<RadzenButton>(2);
            builder.AddAttribute(4, "Image", "images/removeIcon.png");
            builder.AddAttribute(4, "Style", StrBtnRemove);

            builder.AddAttribute(12, "Click",
                RuntimeHelpers.TypeCheck(
                    EventCallback.Factory.Create<MouseEventArgs>(
                            context,
                            (args) => DeleteBtnClicked(args, personForRemove, context, context.Tree)
                        )
                    )
            );

            builder.CloseComponent();
        }

        if (
                !(context.Value is Tabagheh || (context.Value is Person p) && p.MustBeLastNode) ||
                ( //Hamsar
                    (context.Value is Tabagheh tabagheh) && 
                    (tabagheh.Type == TabaghehType.Hamsar)
                )
            )
        {
            builder.OpenComponent<RadzenButton>(2);
            builder.AddAttribute(4, "Image", "images/addIcon.png");
            builder.AddAttribute(4, "Style", StrBtnAdd);

            builder.AddAttribute(12, "Click",
                RuntimeHelpers.TypeCheck(
                    EventCallback.Factory.Create<MouseEventArgs>(
                            context,
                            (args) => AddBtnClicked(args, context)
                        )
                    )
            );

            builder.CloseComponent();
        }
      
    };

    static void DeleteBtnClicked(MouseEventArgs args, Person person, RadzenTreeItem context, RadzenTree tree)
    {
        Console.WriteLine($"حذف {person.FullName} از طبقه {person.Tabagheh} از نوع {person.SubNodeType} و درجه {person.Darajeh}");

        switch (person.Tabagheh)
        {
            case TabaghehType.Hamsar:
                HamsarAddEditDelete.DeleteHamsar(_movareth, person);
                break;
            case TabaghehType.Tabagheh1:
                if (person.SubNodeType == SubNodeType.Children)
                {
                    ChildrenAddEditDelete.DeleteAChild(_movareth, person);
                }
                else
                {
                     ParentsAddEditDelete.DeleteAParent(_movareth, person);
                }
                break;
            case TabaghehType.Tabagheh2:
                if (person.SubNodeType == SubNodeType.Grandparents)
                {
                    GrandparentsAddEditDelete.DeleteAGrandParent(_movareth, person);
                }
                else
                {
                    BrothersSistersAddEditDelete.DeleteABrotherOrSister(_movareth, person);
                }
                
                break;
            case TabaghehType.Tabagheh3:
                AmamAkhvalAddEditDelete.DeleteAnAmmOrKhall(_movareth, person);
                break;
        }      
        
        // Unfurchanatly StateHasChanged does not usable in a static method!!
        _thisComponent.StateHasChanged();        
    }

    static void AddBtnClicked(MouseEventArgs args, RadzenTreeItem context)
    {
        // در اینجا باید یک فرم نمایش داده شود که اطلاعات وارث جدید شامل:
        // نام کامل
        // جنسیت
        // و زنده بودن یا نبودن
        // او را از کاربر بگیرد و باز گرداند

        _thisComponent.dialogService.Open<DialogAddNewPerson>($"افزودن خویشاوند جدید",
            new Dictionary<string, object>() { 
                                                { "NodeTreeItem", context },
                                                { "Movareth", _movareth}
                                             }
            );
        
        
    }

    async Task SaveMovareth()
    { 
        await SaveLoadJsonFile.Download(jsRuntime, _movareth);
    }

    async Task InputFileClicked()
    {
        await jsRuntime.InvokeVoidAsync("loadFileClicked");
    }

    async Task LoadMovareth(IFileListEntry[] files)
    {        
        var file = files.FirstOrDefault();
        @if (file != null)
        {
            _movareth = await SaveLoadJsonFile.Upload(file);
            // _thisComponent.StateHasChanged();  
        }
    }

    // Jquery
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // متاسفانه مثلثی که فرزندان را نمایش یا مخفی می کند
        // در حالت راست نویس موقعیت درستی نداشت
        // و با 
        // CSS
        // نمیشد درستش کرد. خط زیر جبران آن است
        await jsRuntime.InvokeVoidAsync("RedesignNodes");

        await base.OnAfterRenderAsync(firstRender);
    }
}
